
# Default root password = incendia
# Hash generated by:
# echo incendia | mkpasswd -m sha-512 -s |sed -e 's/\$/\\$/g'

EXTRA_USERS_PARAMS = "usermod -p '\$6\$2uWvtnkZ.\$UZ2LBt0Ar.5ZROLVplh5/98yvKtphGgxgU6s3ARhlqPY4PKZXgZZNJahKq8dzRtqst6fAx7lTxGLChuNUd6sw.' root;"
INHERIT += "extrausers"

DISTRO = "Pulsar-Linux"
WRLINUX_RCPLVERSION = ".16"

# Default runtime graphical manager
VIRTUAL-RUNTIME_graphical_init_manager = "lxdm"

# oe-core 2.0 compatibility
#EXTRA_BBMASK .= "|meta-oe/recipes-gnome/libgudev/"

# Remove dangling bbappends
EXTRA_BBMASK .= "|meta-virtualization/recipes-kernel/linux/linux-yocto_4.4.bbappend"
EXTRA_BBMASK .= "|meta-intel/common/recipes-kernel/linux/linux-yocto-rt_3."
EXTRA_BBMASK .= "|meta-intel/common/recipes-kernel/linux/linux-yocto_3."
EXTRA_BBMASK .= "|meta-intel/meta-isg/meta-valleyisland/recipes-kernel/linux/linux-yocto_3.10.bbappend"
EXTRA_BBMASK .= "|wr-hac-agent/recipes-hac/hacweb/lighttpd_1.4.35.bbappend"

# Remove incompatible packages
EXTRA_BBMASK .= "|meta-openembedded/meta-networking/recipes-support/talloc/talloc_2.1.1.bb"
EXTRA_BBMASK .= "|meta-openembedded/meta-networking/recipes-support/libldb/libldb_1.1.17.bb"

# Do not use AUTOREV for kern-tools
EXTRA_BBMASK .= "|wr-kernel/recipes-kernel/kern-tools/kern-tools-native_git.bbappend"

# Work around fetch failure for msmtp
PREFERRED_VERSION_msmtp = "1.4.32"

# Add package-name bbclass
INHERIT_DISTRO = " debian devshell sstate license package-name"

#force override the distro name
DISTRO_NAME_forcevariable = "Pulsar Linux"

INITRAMFS_IMAGE_x86 = "cube-builder-initramfs"
INITRAMFS_IMAGE_x86-64 = "cube-builder-initramfs"

CUBE_GW_EXTRAS ?= ""

# Common installation *except* initramfs image
CUBE_COMMON_INSTALL = " \
    ${@bb.utils.contains('DISTRO_FEATURES', 'ima', 'packagegroup-ima', '', d)} \
    ${@bb.utils.contains('DISTRO_FEATURES', 'rpm-signing', 'packagegroup-rpm-signing', '', d)} \
"

EXTRA_WIFI_SW += " \
hostapd \
hostap-utils \
wireless-tools \
wpa-supplicant \
rtl8723bs-bt \
rtl8723bs \
"
EXTRA_MULTILIB_intel-corei7-64 = "lib32-glib-2.0"

EXTRA_X86_BOOT = ""
EXTRA_X86_BOOT_x86 = " \
    ${@'kernel-initramfs-image' if d.getVar('INITRAMFS_IMAGE', True) else ''} \
"
EXTRA_X86_BOOT_x86-64 = " \
    grub-efi \
    ${@'kernel-initramfs-image' if d.getVar('INITRAMFS_IMAGE', True) else ''} \
"

# HAC and extras
EXTRA_HAC_SW += "hac haccmds essential-cfg-mgr"

CUBE_DOM_SERVER_EXTRA_INSTALL += " \
    ${CUBE_COMMON_INSTALL} \
    ${EXTRA_HAC_SW} \
    ${CUBE_GW_EXTRAS} \
"
CUBE_DOM_E_EXTRA_INSTALL += " \
    ${CUBE_COMMON_INSTALL} \
    ${EXTRA_HAC_SW} \
    ${CUBE_GW_EXTRAS} \
    ${EXTRA_WIFI_SW} \
    ${EXTRA_MULTILIB} \
"
CUBE_DOM_GW_EXTRA_INSTALL += " \
    ${CUBE_COMMON_INSTALL} \
    ${EXTRA_HAC_SW} \
    ${CUBE_GW_EXTRAS} \
"
CUBE_DOM_GW_GFX_EXTRA_INSTALL += " \
    ${CUBE_COMMON_INSTALL} \
    ${EXTRA_HAC_SW} \
    ${CUBE_GW_EXTRAS} \
"
CUBE_ESSENTIAL_EXTRA_INSTALL += " \
    ${CUBE_COMMON_INSTALL} \
    pulsar-upgrade-mgr \
    ${EXTRA_X86_BOOT} \
    ${@bb.utils.contains('DISTRO_FEATURES', 'uefi-secure-boot', 'packagegroup-uefi-secure-boot', '', d)} \
    ${@bb.utils.contains('DISTRO_FEATURES', 'mok-secure-boot', 'packagegroup-mok-secure-boot', '', d)} \
    ${@bb.utils.contains('MACHINE_FEATURES', 'tpm', 'packagegroup-tpm', '', d)} \
    ${@bb.utils.contains('MACHINE_FEATURES', 'tpm2', 'packagegroup-tpm2', '', d)} \
    ${@bb.utils.contains('DISTRO_FEATURES', 'storage-encryption', 'packagegroup-storage-encryption', '', d)} \
"
CUBE_DOM_0_EXTRA_INSTALL += " \
    ${CUBE_COMMON_INSTALL} \
"
CUBE_DOM0_EXTRA_INSTALL += " \
    ${CUBE_COMMON_INSTALL} \
"
CUBE_DOM_1_EXTRA_INSTALL += " \
    ${CUBE_COMMON_INSTALL} \
"
CUBE_BUILDER_EXTRA_INSTALL += " \
    ${CUBE_COMMON_INSTALL} \
"
CUBE_BUILDER_INITRAMFS_EXTRA_INSTALL += " \
    ${@bb.utils.contains('DISTRO_FEATURES', 'storage-encryption', 'packagegroup-storage-encryption-initramfs', '', d)} \
    ${@bb.utils.contains('DISTRO_FEATURES', 'ima', 'packagegroup-ima-initramfs', '', d)} \
"

ZYNQ_QEMU = ""
ZYNQ_QEMU_xilinx-zynq = "qemu-xilinx-native"
EXTRA_IMAGEDEPENDS += "${ZYNQ_QEMU}"


# Turn off WHITELIST
PNWHITELIST_LAYERS = ""

# 1: create the signle large meta-package
# else: inhibit the individual packages
KERNEL_MODULE_COMBINED_PACKAGE = "1"
PERL_MODULE_COMBINED_PACKAGE = "1"

# Build gnome-keyring
PNBLACKLIST[gnome-keyring] = ""
PNBLACKLIST[gcr] = "Incompatible with gnome-keyring"

#upgrade netcat-openbsd priority to bigger than netcat
#Since libvirt-libvirtd needs netcat-openbsd instead of
#netcat
ALTERNATIVE_PRIORITY_netcat-openbsd = "120"

# Enable ldconfig
USE_LDCONFIG = "1"

BB_HASHDEP_WHITELIST = "(.*\..*:gcc-source.*\..*|.*\.do_rootfs:.*\..*)"
BB_HASHDEP_DISABLE = "1"

# Use zeroconf to pickup avahi
DISTRO_FEATURES_append = " zeroconf"
